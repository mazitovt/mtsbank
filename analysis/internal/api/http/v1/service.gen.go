// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// OHLC defines model for OHLC.
type OHLC struct {
	Close     int64     `json:"close"`
	CloseTime time.Time `json:"close_time"`
	High      int64     `json:"high"`
	Low       int64     `json:"low"`
	Open      int64     `json:"open"`
	OpenTime  time.Time `json:"open_time"`
}

// GetRatesCurrencyPairTimeFrameParams defines parameters for GetRatesCurrencyPairTimeFrame.
type GetRatesCurrencyPairTimeFrameParams struct {
	// Limit of the number of values in returned array
	Last *int64 `form:"last,omitempty" json:"last,omitempty"`

	// Starting point
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// Upper bound
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRatesCurrencyPairTimeFrame request
	GetRatesCurrencyPairTimeFrame(ctx context.Context, currencyPair string, timeFrame string, params *GetRatesCurrencyPairTimeFrameParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRatesCurrencyPairTimeFrame(ctx context.Context, currencyPair string, timeFrame string, params *GetRatesCurrencyPairTimeFrameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRatesCurrencyPairTimeFrameRequest(c.Server, currencyPair, timeFrame, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRatesCurrencyPairTimeFrameRequest generates requests for GetRatesCurrencyPairTimeFrame
func NewGetRatesCurrencyPairTimeFrameRequest(server string, currencyPair string, timeFrame string, params *GetRatesCurrencyPairTimeFrameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "currency_pair", runtime.ParamLocationPath, currencyPair)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "time_frame", runtime.ParamLocationPath, timeFrame)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rates/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Last != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last", runtime.ParamLocationQuery, *params.Last); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.From != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.To != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRatesCurrencyPairTimeFrame request
	GetRatesCurrencyPairTimeFrameWithResponse(ctx context.Context, currencyPair string, timeFrame string, params *GetRatesCurrencyPairTimeFrameParams, reqEditors ...RequestEditorFn) (*GetRatesCurrencyPairTimeFrameResponse, error)
}

type GetRatesCurrencyPairTimeFrameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OHLC
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetRatesCurrencyPairTimeFrameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRatesCurrencyPairTimeFrameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRatesCurrencyPairTimeFrameWithResponse request returning *GetRatesCurrencyPairTimeFrameResponse
func (c *ClientWithResponses) GetRatesCurrencyPairTimeFrameWithResponse(ctx context.Context, currencyPair string, timeFrame string, params *GetRatesCurrencyPairTimeFrameParams, reqEditors ...RequestEditorFn) (*GetRatesCurrencyPairTimeFrameResponse, error) {
	rsp, err := c.GetRatesCurrencyPairTimeFrame(ctx, currencyPair, timeFrame, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRatesCurrencyPairTimeFrameResponse(rsp)
}

// ParseGetRatesCurrencyPairTimeFrameResponse parses an HTTP response from a GetRatesCurrencyPairTimeFrameWithResponse call
func ParseGetRatesCurrencyPairTimeFrameResponse(rsp *http.Response) (*GetRatesCurrencyPairTimeFrameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRatesCurrencyPairTimeFrameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OHLC
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get OHLC for currency pair and time frame
	// (GET /rates/{currency_pair}/{time_frame})
	GetRatesCurrencyPairTimeFrame(w http.ResponseWriter, r *http.Request, currencyPair string, timeFrame string, params GetRatesCurrencyPairTimeFrameParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetRatesCurrencyPairTimeFrame operation middleware
func (siw *ServerInterfaceWrapper) GetRatesCurrencyPairTimeFrame(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "currency_pair" -------------
	var currencyPair string

	err = runtime.BindStyledParameter("simple", false, "currency_pair", chi.URLParam(r, "currency_pair"), &currencyPair)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "currency_pair", Err: err})
		return
	}

	// ------------- Path parameter "time_frame" -------------
	var timeFrame string

	err = runtime.BindStyledParameter("simple", false, "time_frame", chi.URLParam(r, "time_frame"), &timeFrame)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time_frame", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRatesCurrencyPairTimeFrameParams

	// ------------- Optional query parameter "last" -------------
	if paramValue := r.URL.Query().Get("last"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "last", r.URL.Query(), &params.Last)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "last", Err: err})
		return
	}

	// ------------- Optional query parameter "from" -------------
	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------
	if paramValue := r.URL.Query().Get("to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRatesCurrencyPairTimeFrame(w, r, currencyPair, timeFrame, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/rates/{currency_pair}/{time_frame}", wrapper.GetRatesCurrencyPairTimeFrame)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5RVTU/kOBD9K1btHrOkgRVa5bZC8yUxGjTDnBBCxqkkRvEH5QrTrVb++8hOoEM6MPQp",
	"jvOq3ntVKXsLyhnvLFoOUGwhqAaNTMsPRI7iwpPzSKwxbStXYnxWjoxkKEBbPj2BDHjjcXjFGgn6DAyG",
	"IOuEHj8GJm1r6PsMCB86TVhCcT3k3OFvnpO5u3tUHHN9+3xxviCmdWFPzdm/i2oS9pa1eRlQSsZ/0m42",
	"V5lBo+vmnelb9+udSOfRHgA9SPKssIlqtDFIHOsA09wvarNf/JhU28pFDSUGRdqzdhYK+N/KdhN0EAHp",
	"USsUyrUtKg4C16qRtkZBkjGIypFQHRFatRFeagpC2lIo2aquTYjYX+ElSYOMFKIzzS0ukEAGj0hhUHB8",
	"tDpaPVVKeg0FnKatDLzkJv0kedKQb58E3EYBfb6Ndm+ryNhHWI287/AT8iBtz0EyEFOIlGIoKMkY96Uc",
	"Ir9H3vMx6FJqutIGP47oidfiek57PmWCWH4okiHIwMb4Al64gWnbmTrMxklenL0529XUxQLVrlBv8ryW",
	"VHgk7UqBa08YApZCxvYLHdx/Z6tjUXZD2SADXEvjU9cvr46/QjaZkQG89MfPmS+00SxcJbhBYTtzhxTf",
	"HmXbYRDaCkLuyEYdRHLz5PmhQ9rsTLcyMEzt/XFc95X8YEmsbS2805ZfIarImWWiN+d8zvXTeyRx5zpb",
	"vkLE7nCam9jw4J0Nw4F7sloNl4BltGlepPetVqmB+X1wdneLxJVmNCnwb8IKCvgr3903+XjZ5Ols75/J",
	"h66kY2fe2JD66ppWQfpaya7lgwS9pWO48RaIO4trj4qxFDhiMgidMZI2Bx0Sfd/3vwMAAP//tXAcmXMH",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
